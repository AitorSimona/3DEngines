#version 460 core 
in vec3 fPosition;
in vec3 fNormal;
out vec4 color; 

vec2 blinnPhongDir(vec3 lightDir, float lightInt, float Ka, float Kd, float Ks, float shininess)
{
vec3 s = normalize(lightDir);
vec3 v = normalize(-fPosition);
vec3 n = normalize(fNormal);
vec3 h = normalize(v+s);
float diffuse = Ka + Kd * lightInt * max(0.0, dot(n, s));
float spec = Ks * pow(max(0.0, dot(n,h)), shininess);
return vec2(diffuse, spec);
}
void main()
{
vec3 lcolor = vec3(0.8,0.2,0.2);
vec2 inten = blinnPhongDir(vec3(1,1,0), 1.0, 0.2, 0.8, 0.8, 80.0);
color = vec4(lcolor * inten.x + vec3(1.0) * inten.y, 1.0);
}

